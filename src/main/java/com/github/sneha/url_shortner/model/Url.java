package com.github.sneha.url_shortner.model;

import jakarta.persistence.*;
import lombok.Getter;
import lombok.Setter;

import java.time.LocalDateTime;
import java.time.temporal.ChronoUnit;
import java.util.UUID;

/**
 * Entity class representing the 'urls' table.
 * This table stores mappings between long URLs and their shortened counterparts,
 * along with metadata like creation time, expiration time, and access count.
 *
 * @author sneharavikumartl
 */
@Entity
@Table(name = "urls")
@Getter
@Setter
public class Url {

    /**
     * Unique identifier for each record.
     * This is auto-generated using the UUID strategy.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    private UUID id;

    /**
     * The original long URL provided by the user.
     * This is stored as a text field to accommodate long URLs.
     */
    @Column(name = "long_url", nullable = false, columnDefinition = "TEXT")
    private String longUrl;

    /**
     * The shortened URL identifier generated by the application.
     * It is unique and has a maximum length of 10 characters.
     */
    @Column(name = "short_url", nullable = false, length = 35, unique = true)
    private String shortUrl;

    /**
     * The timestamp when this record was created.
     * Automatically set to the current time when the entity is instantiated.
     */
    @Column(name = "created_at", nullable = false, updatable = false)
    private LocalDateTime createdAt = LocalDateTime.now();

    /**
     * (Optional) Expiration timestamp for the shortened URL.
     * If set, the short URL becomes invalid after this time.
     */
    @Column(name = "expiration_time")
    private LocalDateTime expirationTime=LocalDateTime.now().plus(365, ChronoUnit.DAYS);;

    /**
     * The number of times this short URL has been accessed.
     * Defaults to 0 when the record is created.
     */
    @Column(name = "access_count", nullable = false)
    private int accessCount = 0;

}
